initSidebarItems({"enum":[["Poll","Indicates whether a value is available or if the current task has been scheduled to receive a wakeup instead."]],"fn":[["local_waker","Creates a `LocalWaker` from a local `wake`."],["local_waker_from_nonlocal","Creates a `LocalWaker` from a non-local `wake`."],["local_waker_ref","Creates a reference to a `LocalWaker` from a local `wake`."],["local_waker_ref_from_nonlocal","Creates a reference to a `LocalWaker` from a non-local `wake`."]],"struct":[["AtomicWaker","A synchronization primitive for task wakeup."],["Context","Information about the currently-running task."],["JoinHandle","The join handle returned by `spawn_with_handle`."],["LocalWaker","A `LocalWaker` is a handle for waking up a task by notifying its executor that it is ready to be run."],["LocalWakerRef","A `LocalWaker` that is only valid for a given lifetime."],["SpawnError","The result of a failed spawn"],["SpawnErrorKind","Provides the reason that an executor was unable to spawn."],["SpawnLocalObjError","The result of a failed spawn"],["SpawnObjError","The result of a failed spawn"],["Waker","A `Waker` is a handle for waking up a task by notifying its executor that it is ready to be run."]],"trait":[["Spawn","Spawns tasks that poll futures to completion onto its associated task executor."],["SpawnExt","Extension trait for `Spawn`"],["UnsafeWake","An unsafe trait for implementing custom memory management for a `Waker` or `LocalWaker`."],["Wake","A way of waking up a specific task."]]});